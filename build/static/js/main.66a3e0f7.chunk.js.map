{"version":3,"sources":["Component/Cards/Card.jsx","API/index.js","Component/Charts/Chart.jsx","Component/CountryPicker/Picker.jsx","App.js","index.js"],"names":["Cardi","data","confirmed","recovered","deaths","lastUpdate","className","Grid","container","direction","justify","alignItems","item","component","Card","xs","md","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changedUrl","axios","get","modifiedData","console","log","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","Picker","handelCountryPicker","fetchCountry","setFetchCountry","fetchedCountry","FormControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","src","alt","React","Component","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.66a3e0f7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\n\r\nimport CountUp from \"react-countup\";\r\n\r\nimport \"./cardcss.css\";\r\n\r\nconst Cardi = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n  if (!confirmed) {\r\n    return \"loading...\";\r\n  }\r\n  return (\r\n    <div className=\"container\">\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        <Grid item component={Card} xs={12} md={3} className=\"infected\">\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              INFECTED\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={confirmed.value}\r\n                duration={3}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">Number of Active cases</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className=\"card recovered\">\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              RECOVERED\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={recovered.value}\r\n                duration={3}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">Number of Recovered cases</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className=\"card deaths\">\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              DEATH\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={deaths.value}\r\n                duration={3}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">Number of deaths</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cardi;\r\n","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n  let changedUrl = url;\r\n\r\n  if (country) {\r\n    changedUrl = `${url}/countries/${country}`;\r\n  }\r\n  try {\r\n    const { data } = await axios.get(changedUrl);\r\n\r\n    const modifiedData = {\r\n      confirmed: data.confirmed,\r\n      recovered: data.recovered,\r\n      deaths: data.deaths,\r\n      lastUpdate: data.lastUpdate,\r\n    };\r\n    return modifiedData;\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n\r\n    return modifiedData;\r\n  } catch (err) {\r\n    console.log(\"nothing\" + err);\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url}/countries`);\r\n\r\n    return countries.map((country) => country.name);\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../API\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\n\r\nimport \"./charti.css\";\r\n\r\nconst Chart = ({ data, country }) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const lineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255,0,0,0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  const barChart = data.confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0,0,255,0.5)\",\r\n              \"rgba(0,255,0,0.5)\",\r\n              \"rgba(255,0,0,0.5)\",\r\n            ],\r\n            data: [\r\n              data.confirmed.value,\r\n              data.recovered.value,\r\n              data.deaths.value,\r\n            ],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current State in ${country}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return <div className=\"container\">{country ? barChart : lineChart}</div>;\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { FormControl, NativeSelect } from \"@material-ui/core\";\r\nimport { fetchCountries } from \"../../API\";\r\nimport \"./pick.css\";\r\n\r\nconst Picker = ({ handelCountryPicker }) => {\r\n  const [fetchCountry, setFetchCountry] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchedCountry = async () => {\r\n      setFetchCountry(await fetchCountries());\r\n    };\r\n    fetchedCountry();\r\n  }, [setFetchCountry]);\r\n\r\n  return (\r\n    <FormControl className=\"form_control\">\r\n      <NativeSelect\r\n        defaultValue=\"\"\r\n        onChange={(e) => handelCountryPicker(e.target.value)}\r\n      >\r\n        <option value=\"\">Global</option>\r\n        {fetchCountry.map((country, i) => (\r\n          <option key={i} value={country}>\r\n            {country}\r\n          </option>\r\n        ))}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default Picker;\r\n","import React from \"react\";\r\nimport { Cardi, Charts, Pickers } from \"./Component\";\r\nimport { fetchData } from \"./API\";\r\nimport \"./index.css\";\r\n\r\nconst imgSorce = \"https://i.ibb.co/7QpKsCX/image.png\";\r\nclass App extends React.Component {\r\n  state = {\r\n    data: [],\r\n    country: \"\",\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const fetchedData = await fetchData();\r\n\r\n    this.setState({ data: fetchedData });\r\n  }\r\n\r\n  handelCountryPicker = async (country) => {\r\n    const fetchedData = await fetchData(country);\r\n    this.setState({ data: fetchedData, country: country });\r\n  };\r\n\r\n  render() {\r\n    const { data, country } = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <img src={imgSorce} alt=\"Covid-19\" />\r\n        <Cardi data={data} />\r\n        <Pickers handelCountryPicker={this.handelCountryPicker} />\r\n        <Charts data={data} country={country} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDom.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}